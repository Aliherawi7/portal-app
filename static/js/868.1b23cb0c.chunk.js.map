{"version":3,"file":"static/js/868.1b23cb0c.chunk.js","mappings":"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","sources":["Utils/DateTimeUtils.js","components/Post/Post.jsx","constants/Roles.js","pages/Posts/Posts.js"],"sourcesContent":["export function timeSince(date) {\r\n  const now = new Date()\r\n  const seconds = Math.floor((now - date) / 1000)\r\n\r\n  let interval = Math.floor(seconds / 31536000)\r\n  if (interval >= 1) {\r\n    return `${interval} سال پیش`\r\n  }\r\n\r\n  interval = Math.floor(seconds / 2592000)\r\n  if (interval >= 1) {\r\n    return `${interval} ماه پیش`\r\n  }\r\n\r\n  interval = Math.floor(seconds / 86400)\r\n  if (interval >= 1) {\r\n    return `${interval} روز پیش`\r\n  }\r\n\r\n  interval = Math.floor(seconds / 3600)\r\n  if (interval >= 1) {\r\n    return `${interval} ساعت پیش`\r\n  }\r\n\r\n  interval = Math.floor(seconds / 60)\r\n  if (interval >= 1) {\r\n    return `${interval} دقیقه پیش`\r\n  }\r\n\r\n  return `همین الان`\r\n}\r\n\r\nexport function getTheMonthDays(date) {\r\n  const year = date.getFullYear() // gets the current year\r\n  const month = date.getMonth() // gets the current month (0-11)\r\n  const daysInMonth = new Date(year, month + 1, 0).getDate() // gets the number of days in the current month\r\n  return daysInMonth\r\n}\r\n","import React, { useState } from \"react\"\r\nimport \"./Post.css\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { timeSince } from \"../../Utils/DateTimeUtils\"\r\nimport Roles from \"../../constants/Roles\"\r\nimport { downloadFileFromApi } from \"../../Utils/UtilsFunctions\"\r\nimport APIEndpoints from \"../../constants/APIEndpoints\"\r\nimport { useStateValue } from \"../../context/StateProvider\"\r\nimport ICONS from \"../../constants/Icons\"\r\n\r\nconst Post = ({\r\n  role,\r\n  id,\r\n  images,\r\n  docs,\r\n  author,\r\n  date,\r\n  text,\r\n  isUpdated = false,\r\n  isHidden,\r\n  handleDelete,\r\n  customRef = null,\r\n}) => {\r\n  const [{ authentication }, dispatch] = useStateValue()\r\n  const [isHide, setIsHide] = useState(isHidden)\r\n\r\n  const handleHideShow = () => {\r\n    fetch(APIEndpoints.root + APIEndpoints.posts.toggleHideShow(id), {\r\n      headers: {\r\n        Authorization: \"Bearer \" + authentication.token,\r\n      },\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        setIsHide(!isHide)\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    <div className=\"post\" ref={customRef}>\r\n      <div className=\"image_header_container\">\r\n        <div className=\"post_header display_flex justify_content_space_between\">\r\n          <div className=\"post_share_with display_flex align_items_center\">\r\n            <img src={APIEndpoints.redirecter + author?.imageUrl} alt={author?.name} crossorigin=\"anonymous\" />\r\n            <div className=\"post_date\">\r\n              <p>\r\n                {author?.name} {author?.lastname}\r\n              </p>\r\n              <p style={{ fontSize: \"10px\" }}>\r\n                {timeSince(new Date(date))}\r\n                {isUpdated && \" بروزرسانی شد\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          {role == Roles.ADMIN ? (\r\n            // Post Settings on left of Posts\r\n            <div className=\"post_settings\">\r\n              <span className=\"setting_icon cursor_pointer\">\r\n                <i className={ICONS.threeDots}></i>\r\n              </span>\r\n              <div className=\"setting_menu\">\r\n                <ul>\r\n                  <li className=\"setting_option\">\r\n                    <Link to={\"edit/\" + id} className=\"setting_option_details\">\r\n                      <i className={ICONS.pencilSquare}></i>\r\n                      <span>ویرایش پست</span>\r\n                    </Link>\r\n                  </li>\r\n                  {/* Handle Hide & UnHide of the Post */}\r\n                  <li className=\"setting_option\" onClick={handleHideShow}>\r\n                    <span className=\"setting_option_details\">\r\n                      {!isHide ? (\r\n                        <i className={ICONS.eyeSlashFill}></i>\r\n                      ) : (\r\n                        <i className={ICONS.eyeFill}></i>\r\n                      )}\r\n                      {!isHide ? (\r\n                        <span>پنهان کردن</span>\r\n                      ) : (\r\n                        <span>نمایش دادن</span>\r\n                      )}\r\n                    </span>\r\n                  </li>\r\n                  <li className=\"setting_option\" onClick={handleDelete}>\r\n                    <span className=\"setting_option_details\">\r\n                      <i className={ICONS.trashFill}></i>\r\n                      <span>حذف پست</span>\r\n                    </span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div className=\"file_post_body display_flex flex_direction_column\">\r\n        {/* This is Text for each post */}\r\n        <div className=\"post_text\">\r\n          <p dangerouslySetInnerHTML={{ __html: text }}></p>\r\n        </div>\r\n        {/* For each item of image array render a post_file */}\r\n        <div className=\"post_images\">\r\n          {images?.map((item) => {\r\n            return <img src={APIEndpoints.redirecter + item} alt=\"\" key={item} crossorigin=\"anonymous\" />\r\n          })}\r\n        </div>\r\n        <div className=\"pdf_files_container\">\r\n          {/* For each item of pdf array render a post_file */}\r\n          {docs?.map((doc) => {\r\n            return (\r\n              <div className=\"post_file display_flex\" key={doc}>\r\n                <div className=\"files_icon_container display_flex\">\r\n                  <i className={ICONS.fileEarmarkPdfFill}></i>\r\n                  <p className=\"text_color display_flex align_items_center\">\r\n                    {doc.split(\"/\")[doc.split(\"/\").length - 1]}\r\n                  </p>\r\n                </div>\r\n                <div className=\"file_download_button\">\r\n                  <button\r\n                    className=\"btn_download display_flex cursor_pointer align_items_center justify_content_center\"\r\n                    type=\"button\"\r\n                    onClick={() => downloadFileFromApi(APIEndpoints.redirecter + doc)}\r\n                  >\r\n                    <span className=\"button_download_text\">دانلود</span>\r\n                    <span className=\"button_download_icon display_flex align_items_center justify_content_center\">\r\n                      <i className={ICONS.download}></i>\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","const Roles = {\r\n  ADMIN: \"ADMIN\",\r\n  STUDENT: \"STUDENT\",\r\n}\r\nexport default Roles\r\n","import React, { useEffect, useState, useRef } from \"react\"\r\nimport Post from \"../../components/Post/Post\"\r\nimport Spinner from \"../../components/UI/Loading/Spinner\"\r\nimport { useStateValue } from \"../../context/StateProvider\"\r\nimport APIEndpoints from \"../../constants/APIEndpoints\"\r\n\r\nconst Posts = () => {\r\n  const [posts, setposts] = useState([])\r\n  const [hasMore, setHasMore] = useState(true)\r\n  const lastNode = useRef()\r\n  const [pagination, setPagination] = useState({ offset: 0, pageSize: 5 })\r\n  const [loading, setLoading] = useState(true)\r\n  const [{ authentication }, dispatch] = useStateValue()\r\n\r\n  const lastNodeReference = (node) => {\r\n    if (loading) return\r\n    if (lastNode.current) lastNode.current.disconnect()\r\n    lastNode.current = new IntersectionObserver((enteries) => {\r\n      if (enteries[0].isIntersecting) {\r\n        if (hasMore) {\r\n          setPagination({\r\n            offset: pagination.offset + 1,\r\n            pageSize: pagination.pageSize,\r\n          })\r\n        }\r\n      }\r\n    })\r\n    if (node) lastNode.current.observe(node)\r\n  }\r\n\r\n  // The authentication token must be read from somewhere in the frontend\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    fetch(\r\n      APIEndpoints.root +\r\n        APIEndpoints.posts.getAllPostsForStudent +\r\n        `?offset=${pagination.offset}&pageSize=${pagination.pageSize}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: { Authorization: \"Bearer \" + authentication.token },\r\n      }\r\n    )\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json()\r\n        } else {\r\n          throw new Error(res.statusText)\r\n        }\r\n      })\r\n      .then((data) => {\r\n        if (data.totalPages - 1 > pagination.offset) {\r\n          setHasMore(true)\r\n        } else {\r\n          setHasMore(false)\r\n        }\r\n        const newPosts = [...posts, ...data.content].filter(\r\n          (obj, index, self) => index === self.findIndex((o) => o.id === obj.id)\r\n        )\r\n        setposts(newPosts)\r\n        setLoading(false)\r\n      })\r\n  }, [pagination])\r\n\r\n  return (\r\n    <div className=\"post_page display_flex align_items_center justify_content_center flex_direction_column\">\r\n      {Array.from(new Set(posts)).map((item, index) => {\r\n        if (posts.length === index + 1) {\r\n          return (\r\n            <Post\r\n              key={item.id}\r\n              author={item.author}\r\n              date={item.dateTime}\r\n              images={item.images}\r\n              docs={item.docs}\r\n              text={item.message}\r\n              isUpdated={item.isUpdated}\r\n              customRef={lastNodeReference}\r\n            />\r\n          )\r\n        }\r\n        return (\r\n          <Post\r\n            key={item.id}\r\n            author={item.author}\r\n            date={item.dateTime}\r\n            images={item.images}\r\n            docs={item.docs}\r\n            text={item.message}\r\n          />\r\n        )\r\n      })}\r\n      <section style={{ position: \"relative\", height: \"60px\" }}>\r\n        {hasMore && <Spinner />}\r\n        {!hasMore && (\r\n          <div className=\"end_of_posts text_align_center\">\r\n            <h5>آخرین پست</h5>\r\n            <h6>تعداد کل پست ها {posts.length}</h6>\r\n          </div>\r\n        )}\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Posts\r\n"],"names":["timeSince","date","now","Date","seconds","Math","floor","interval","role","id","images","docs","author","text","isUpdated","isHidden","handleDelete","customRef","useStateValue","authentication","useState","isHide","setIsHide","className","ref","src","APIEndpoints","imageUrl","alt","name","crossorigin","lastname","style","fontSize","Roles","ICONS","to","onClick","fetch","headers","Authorization","token","then","res","ok","dangerouslySetInnerHTML","__html","map","item","doc","split","length","type","downloadFileFromApi","ADMIN","STUDENT","posts","setposts","hasMore","setHasMore","lastNode","useRef","offset","pageSize","pagination","setPagination","loading","setLoading","lastNodeReference","node","current","disconnect","IntersectionObserver","enteries","isIntersecting","observe","useEffect","method","json","Error","statusText","data","totalPages","newPosts","content","filter","obj","index","self","findIndex","o","Array","from","Set","dateTime","message","position","height"],"sourceRoot":""}